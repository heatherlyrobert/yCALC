.TH yCALC_bits 6 2018-apr "linux" "interactive feel, usage, and navigation"

.SH NAME
yCALC \- fast, powerful, flexible, shared calculation engine

.SH PATRON
.B kottus-hecatoncheires
(hundred-handed)
ancient greek world-shattering giant

.SH IMAGERY
ugly, impossibly powerful, one-hundred handed, fifty-headed giant

.SH SUMMARY
yCALC is a clean, reliable, debuggable, and shared library for creating
and executing fast, flexible byte-code calculations that can be used in any
programming context (spreadsheet to system utility).

.SH DOCUMENTATION FILES
.nf
yCALC (3)          interfacing applications with library
yCALC_addr (6)     specifics of calculating addresses
yCALC_audit (6)    specifics of auditing functions
.B yCALC_bits (6)·····specifics of bitwise operators
yCALC_group (6)    specifics of grouping operators
yCALC_logic (6)    specifics of logical operators
yCALC_lookup (6)   specifics of range lookups
yCALC_math (6)     specifics of mathmatical operators
yCALC_mathy (6)    specifics of mathy format
yCALC_range (6)    specifics of range/stats functions
yCALC_text (6)     specifics of text/string functions
yCALC_time (6)     specifics of time related functions
yCALC_trig (6)     specifics of trigonometry functions
yCALC (7)          decision rationale, scope, and objectives

.SH TABLE OF CONTENTS
.nf  
a) overview        quick summary
b) operators       six operators
c) assignment      combination operator/assignments

.SH A) OVERVIEW
bitwise operators seem a strange addition to anything but assembler or c,
but they are critical to me, so i ported them to yRPN, yCALC, and gyges.
their meaning, direction, and precedence match c-language.

critical note, c-language uses the cpu-word as the bitwise operator length,
but i can not.  so, nearly all operators can still be implemented much the same
since shared leading zeros have no impact.  bitwise not (~), though, potentially
alters the leading zeros, and so requires a variation as explained below.

.SH B) OPERATORS
the operators mirror c-language, except NOT (~) which requires a length operand
(in nibbles) to understand the length of the comparision.  this makes gives not
(~) and arity of 2, unlike c.

.SS input variables for explanation
.nf
b  = é'1011  (11)
m  = é'1101  (13)

.SS operators
.nf
OPER·· meaning-------- arity/prec   usage---  example---  in binary----
~      bit not           2    f     i ~ n     b~1  =  4   é'0100
&      bit and           2    l     a & b     b&m  =  9   é'1001
^      bit xor           2    m     e ^ f     b^m  =  6   é'0110
|      bit or            2    n     c | d     b|m  = 15   é'1111
>>     bit shift right   2    i     e >> f    b>>3 =  1   é'0000'0001
<<     bit shift left    2    i     g << h    b<<2 = 44   é'0010'1100

.SH C) ASSIGNMENT
assignments do not apply to gyges, but do in agrios macros, hephaestus, and
other applications.

.nf
OPER·· meaning-------- arity/prec   usage---  example---  in binary----
~=     not/assign        2    r
&=     and/assign        2    r
|=     or/assign         2    r
^=     xor/assign        2    r
<<=    left/assign       2    r
>>=    right/assign      2    r

.SH AUTHOR
heatherly <jelloshrike at gmail dot com>

.SH COLOPHON
this page is part of a documentation package mean to make the use of the
heatherly tools easier and faster
